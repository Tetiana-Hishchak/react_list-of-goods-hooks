{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","EMTY","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","reverse","sort","good1","good2","NAME","localeCompare","LENGTH","length","getPreparedGoods","setSort","field","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0EAZQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAEGD,K,gBAAAA,E,YAAAA,E,SAAAA,M,KAgDE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAASI,MAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EAxCR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,WAEPI,EAAa,YAAOD,GAE1B,OAAKL,GAAaE,EACTI,EAAcC,WAGnBP,GACFM,EAAcE,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAML,EAASgB,KACb,OAAOT,EACHQ,EAAME,cAAcH,GACpBA,EAAMG,cAAcF,GAC1B,KAAMf,EAASkB,OACb,OAAIH,EAAMI,SAAWL,EAAMK,OAClBZ,EACHQ,EAAMI,OAASL,EAAMK,OACrBL,EAAMK,OAASJ,EAAMI,OAGpBZ,EACHQ,EAAME,cAAcH,GACpBA,EAAMG,cAAcF,GAE1B,QACE,OAAO,MAKRJ,GAMcS,CACnBnB,EAAiB,CAAEI,YAAWE,eAO1Bc,EAAU,SAACC,GAAD,OACyB,WACvChB,EAAagB,KAOf,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYpB,IAAcL,EAASgB,OAErCU,QAASL,EAAQrB,EAASgB,MAL5B,iCAUA,wBACEQ,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYpB,IAAcL,EAASkB,SAErCQ,QAASL,EAAQrB,EAASkB,QAL5B,4BAUA,wBACEM,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAalB,IAEfmB,QAhCW,WACjBlB,GAAeD,IA0BX,sBASEF,GAAaE,IACb,wBACEiB,KAAK,SACLD,UAAU,4BACVG,QAlDI,WACZpB,EAAaN,EAASI,MACtBI,GAAc,IA6CR,sBAUJ,6BACGC,EAAakB,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCjIjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.68f9e692.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\nenum SortType {\n  LENGTH = 'length',\n  NAME = 'name',\n  EMTY = '',\n}\n\ninterface FilterParams {\n  sortField: SortType;\n  isReversed: boolean;\n}\n\nfunction getPreparedGoods(\n  goods:string[],\n  { sortField, isReversed }: FilterParams,\n) {\n  const preparedGoods = [...goods];\n\n  if (!sortField && isReversed) {\n    return preparedGoods.reverse();\n  }\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case (SortType.NAME):\n          return isReversed\n            ? good2.localeCompare(good1)\n            : good1.localeCompare(good2);\n        case (SortType.LENGTH):\n          if (good2.length !== good1.length) {\n            return isReversed\n              ? good2.length - good1.length\n              : good1.length - good2.length;\n          }\n\n          return isReversed\n            ? good2.localeCompare(good1)\n            : good1.localeCompare(good2);\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.EMTY);\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer, { sortField, isReversed },\n  );\n  const reset = () => {\n    setSortField(SortType.EMTY);\n    setIsReversed(false);\n  };\n\n  const setSort = (field: SortType | (\n    (prevState: SortType) => SortType)) => () => {\n    setSortField(field);\n  };\n\n  const onReversed = () => {\n    setIsReversed(!isReversed);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField !== SortType.NAME,\n          })}\n          onClick={setSort(SortType.NAME)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField !== SortType.LENGTH,\n          })}\n          onClick={setSort(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={onReversed}\n        >\n          Reverse\n        </button>\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}